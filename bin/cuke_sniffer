#!/usr/bin/env ruby
$:.unshift(File.dirname(__FILE__) + '/../lib') unless $:.include?(File.dirname(__FILE__) + '/../lib')

require 'cuke_sniffer'

help_cmd_txt = "Welcome to CukeSniffer!
Calling CukeSniffer with no arguments will run it against the current directory.
Other Options for Running include:
  -o, --out <type> (name)                   : Where <type> is 'html', 'xml', or 'pdf'.
                                              Runs CukeSniffer then outputs an
                                              html/xml/pdf file in the current
                                              directory (with optional name).
  -h,  --help                               : You get this lovely document.
  -p,  --project <project_root>             : Root directory of project.
  -f,  --features <feature_path>            : Path to features directory.
  -s,  --step_definitions <step_def_path>   : Path to step definitions directory.
  -hk, --hooks <hooks_path>                 : Path to support directory.            "

def find_index_by_regex_match(list, regex)
  list.each do |item|
    return list.index(item) if item =~ regex
  end
  nil
end

def build_cli_hash(argv)
  cucumber_hash ={
      :hooks_location => /-hk|--hooks/,
      :features_location => /-f|--features/,
      :step_definitions_location => /-s|--step_definitions/,
      :project_location => /-p|--project/}
  cli_hash = {}
  cucumber_hash.each do |symbol, regex|
    index_of_key = find_index_by_regex_match(argv, regex)
    if !index_of_key.nil?
      cli_hash[symbol] = argv[index_of_key + 1]
    end
  end
  cli_hash
end

def handle_output(argv)
  if find_index_by_regex_match(argv, /-o|--out/)
    output_type_hash = {
        :html => "html",
        :xml => "xml",
        :pdf => "pdf"
    }
    output_type_hash.each_value do |value|
      index_of_key = argv.index(value)
      if !index_of_key.nil?
        file_type = argv[index_of_key]
        file_name = argv[index_of_key+1]
        call_output(file_type, file_name)
      end
    end
  else
    puts @cuke_sniffer.output_results
  end
end

def call_output(file_type, file_name)
  case file_type
    when "xml"
      file_name.nil? ? @cuke_sniffer.output_xml  : @cuke_sniffer.output_xml(file_name)
    when "html"
      file_name.nil? ? @cuke_sniffer.output_html : @cuke_sniffer.output_html(file_name)
    when "pdf"
      file_name.nil? ? @cuke_sniffer.output_pdf  : @cuke_sniffer.output_pdf(file_name)
    else
      puts "#{file_type} is not a supported version of cuke_sniffer output."
  end
end

if ARGV.include? "-h" or ARGV.include? "--help"
  puts help_cmd_txt
  exit
end

arguments_hash = build_cli_hash(ARGV)
@cuke_sniffer = CukeSniffer::CLI.new(arguments_hash)
handle_output(ARGV)


puts "Completed Sniffing."
